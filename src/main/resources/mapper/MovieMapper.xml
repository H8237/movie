<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.movierecommmendation.movie.dao.MovieDao">
  <resultMap id="BaseResultMap" type="com.movierecommmendation.movie.entity.Movie">
    <id column="movieID" jdbcType="INTEGER" property="movieid" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="director" jdbcType="VARCHAR" property="director" />
    <result column="scriptwriter" jdbcType="VARCHAR" property="scriptwriter" />
    <result column="starring" jdbcType="VARCHAR" property="starring" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="relase_date" jdbcType="VARCHAR" property="relaseDate" />
    <result column="running_time" jdbcType="INTEGER" property="runningTime" />
    <result column="rating" jdbcType="INTEGER" property="rating" />
    <result column="rating_people" jdbcType="INTEGER" property="RatingPeople" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.movierecommmendation.movie.entity.Movie">
    <result column="introduction" jdbcType="LONGVARCHAR" property="introduction" />
  </resultMap>
  <parameterMap id="Movie" type="com.movierecommmendation.movie.entity.Movie"/>

  <sql id="Base_Column_List">
		movieID, title, director, introduction, scriptwriter,
		 starring, type, relase_date, running_time, rating, rating_people
	</sql>

  <insert id="insert" parameterMap="Movie">
		insert into movie (movieID, title, director, introduction, scriptwriter, starring, type, relase_date, running_time, rating)
		values (#{movieid}, #{title}, #{director}, #{introduction}, #{scriptwriter}, #{starring}, #{type}, #{relaseDate}, #{runningTime}, #{rating})
	</insert>

  <update id="update" parameterMap="Movie">
    update
    movie
    set
    <if test="movieid!=null and movieid!=''">
      movieID = #{movieid}
    </if>

    <if test="title!=null and title!=''">
      , title = #{tile}
    </if>

    <if test="director!=null and director!=''">
      , director = #{director}
    </if>

    <if test="introduction!=null and introduction!=''">
      , introduction = #{introduction}
    </if>

    <if test="scriptwriter!=null and scriptwriter!=''">
      , age = #{age}
    </if>

    <if test="starring!=null and starring!=''">
      , starring = #{starring}
    </if>

    <if test="type!=null and type!=''">
      , type = #{type}
    </if>

    <if test="relaseDate!=null and relaseDate!=''">
      , relase_date = #{relaseDate}
    </if>

    <if test="runningTime!=null and runningTime!=''">
      , runingtime = #{runningTime}
    </if>

    <if test="rating!=null and rating!=''">
      , rating = #{rating}
    </if>
    where movieID= #{movieid}
  </update>

  <delete id="delete" parameterType="User">
		delete from  movie where movieID=#{movieid}
	</delete>

  <select id="findAll" resultMap="BaseResultMap" >
		select
    <include refid="Base_Column_List" />
		from movie
	</select>

  <select id="findByPrimaryKey" resultMap="BaseResultMap">
        select
        *
        from movie
        where movieID = #{movieid}
    </select>

  <select id="findByTitle" parameterType="String" resultMap="BaseResultMap">
    select
    *
    from movie
    where title like CONCAT('%', #{title}, '%')
    or director like CONCAT('%', #{title}, '%')
  </select>

  <select id="findByAvgRating" resultMap="BaseResultMap">
    select *
    from moviebyrating
    order by avg desc
    limit 10, 6
  </select>

  <select id="findByRatingMore" resultMap="BaseResultMap">
    select *
    from moviebyratemore
  </select>

  <select id="isUserLike" parameterType="Integer" resultType="Integer">
    select MovieID
    from user_like
    where MovieID=#{MovieID} and UserID=#{UserID}
  </select>

  <insert id="insertUserLike" parameterType="Integer">
	insert into user_like (MovieID, UserID)
	values (#{MovieID}, #{UserID})
  </insert>

  <delete id="deleteUserLike" parameterType="Integer">
		delete from  user_like where MovieID=#{MovieID} and UserID=#{UserID}
	</delete>

  <select id="findUserLikeByUser" parameterType="Integer" resultMap="BaseResultMap">
    select
    *
    from user_like_movie_view
    WHERE UserID = #{UserID}
   </select>

  <select id="findTopMoviesByType" parameterType="String" resultMap="BaseResultMap">
    select
    *
    from ${type}_topmovies_view
  </select>

  <select id="findMovieByMovie" parameterType="Integer" resultMap="BaseResultMap">
    select
    *
    from content_movies_view
    WHERE BaseMovieID = #{BaseMovieID}
   </select>

  <select id="findMovieByOnUser" parameterType="Integer" resultMap="BaseResultMap">
    select
    *
    from on_user_view
    WHERE UserID = #{UserID}
   </select>

  <select id="findMovieByOffUser" parameterType="Integer" resultMap="BaseResultMap">
    select
    *
    from off_user_view
    WHERE UserID = #{UserID}
   </select>

  <select id="findByType" parameterType="String" resultMap="BaseResultMap">
    select
    *
    from movie
    where type like CONCAT('%', #{type}, '%')
  </select>

</mapper>